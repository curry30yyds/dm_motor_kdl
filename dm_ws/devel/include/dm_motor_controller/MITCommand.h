// Generated by gencpp from file dm_motor_controller/MITCommand.msg
// DO NOT EDIT!


#ifndef DM_MOTOR_CONTROLLER_MESSAGE_MITCOMMAND_H
#define DM_MOTOR_CONTROLLER_MESSAGE_MITCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dm_motor_controller
{
template <class ContainerAllocator>
struct MITCommand_
{
  typedef MITCommand_<ContainerAllocator> Type;

  MITCommand_()
    : kp(0.0)
    , kd(0.0)
    , position(0.0)
    , velocity(0.0)
    , torque(0.0)  {
    }
  MITCommand_(const ContainerAllocator& _alloc)
    : kp(0.0)
    , kd(0.0)
    , position(0.0)
    , velocity(0.0)
    , torque(0.0)  {
  (void)_alloc;
    }



   typedef double _kp_type;
  _kp_type kp;

   typedef double _kd_type;
  _kd_type kd;

   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::dm_motor_controller::MITCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dm_motor_controller::MITCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MITCommand_

typedef ::dm_motor_controller::MITCommand_<std::allocator<void> > MITCommand;

typedef boost::shared_ptr< ::dm_motor_controller::MITCommand > MITCommandPtr;
typedef boost::shared_ptr< ::dm_motor_controller::MITCommand const> MITCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dm_motor_controller::MITCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dm_motor_controller::MITCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dm_motor_controller::MITCommand_<ContainerAllocator1> & lhs, const ::dm_motor_controller::MITCommand_<ContainerAllocator2> & rhs)
{
  return lhs.kp == rhs.kp &&
    lhs.kd == rhs.kd &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dm_motor_controller::MITCommand_<ContainerAllocator1> & lhs, const ::dm_motor_controller::MITCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dm_motor_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dm_motor_controller::MITCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dm_motor_controller::MITCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dm_motor_controller::MITCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ffcd33c7fb2269670e5e49cb5a27d69";
  }

  static const char* value(const ::dm_motor_controller::MITCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ffcd33c7fb22696ULL;
  static const uint64_t static_value2 = 0x70e5e49cb5a27d69ULL;
};

template<class ContainerAllocator>
struct DataType< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dm_motor_controller/MITCommand";
  }

  static const char* value(const ::dm_motor_controller::MITCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 kp\n"
"float64 kd\n"
"float64 position\n"
"float64 velocity\n"
"float64 torque\n"
;
  }

  static const char* value(const ::dm_motor_controller::MITCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp);
      stream.next(m.kd);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MITCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dm_motor_controller::MITCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dm_motor_controller::MITCommand_<ContainerAllocator>& v)
  {
    s << indent << "kp: ";
    Printer<double>::stream(s, indent + "  ", v.kp);
    s << indent << "kd: ";
    Printer<double>::stream(s, indent + "  ", v.kd);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "torque: ";
    Printer<double>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DM_MOTOR_CONTROLLER_MESSAGE_MITCOMMAND_H
